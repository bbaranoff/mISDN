
TODO: Backport sysfs stuff for older kernel versions, for now we only keep the
new interface to
mISDNregister.


From 862d339a0fb10b5e8491e2cb62fa109597e8af55 Mon Sep 17 00:00:00 2001
From: Matthias Urlichs <smurf@smurf.noris.de>
Date: Sat, 16 Aug 2008 00:09:24 +0200
Subject: [PATCH] mISDN: Say hello to /sys/class/mISDN. ;-)

Signed-Off-By: Matthias Urlichs <matthias@urlichs.de>
---
 drivers/isdn/hardware/mISDN/hfcmulti.c |    4 +-
 drivers/isdn/hardware/mISDN/hfcpci.c   |   25 +---
 drivers/isdn/mISDN/core.c              |  269 +++++++++++++++++++++++++-------
 drivers/isdn/mISDN/l1oip_core.c        |    3 +-
 include/linux/mISDNif.h                |    8 +-
 5 files changed, 230 insertions(+), 79 deletions(-)

Index: standalone/drivers/isdn/mISDN/core.c
===================================================================
--- standalone.orig/drivers/isdn/mISDN/core.c
+++ standalone/drivers/isdn/mISDN/core.c
@@ -26,183 +26,39 @@ MODULE_AUTHOR("Karsten Keil");
 MODULE_LICENSE("GPL");
 module_param(debug, uint, S_IRUGO | S_IWUSR);
 
+static LIST_HEAD(devices);
+DEFINE_RWLOCK(device_lock);
 static u64		device_ids;
 #define MAX_DEVICE_ID	63
 
 static LIST_HEAD(Bprotocols);
 static DEFINE_RWLOCK(bp_lock);
 
-static void mISDN_dev_release(struct device *dev)
-{
-	/* nothing to do: the device is part of its parent's data structure */
-}
-
-static ssize_t _show_id(struct device *dev,
-			struct device_attribute *attr, char *buf)
-{
-	struct mISDNdevice *mdev = dev_to_mISDN(dev);
-
-	if (!mdev)
-		return -ENODEV;
-	return sprintf(buf, "%d\n", mdev->id);
-}
-
-static ssize_t _show_nrbchan(struct device *dev,
-			     struct device_attribute *attr, char *buf)
-{
-	struct mISDNdevice *mdev = dev_to_mISDN(dev);
-
-	if (!mdev)
-		return -ENODEV;
-	return sprintf(buf, "%d\n", mdev->nrbchan);
-}
-
-static ssize_t _show_d_protocols(struct device *dev,
-				 struct device_attribute *attr, char *buf)
-{
-	struct mISDNdevice *mdev = dev_to_mISDN(dev);
-
-	if (!mdev)
-		return -ENODEV;
-	return sprintf(buf, "%d\n", mdev->Dprotocols);
-}
-
-static ssize_t _show_b_protocols(struct device *dev,
-				 struct device_attribute *attr, char *buf)
-{
-	struct mISDNdevice *mdev = dev_to_mISDN(dev);
-
-	if (!mdev)
-		return -ENODEV;
-	return sprintf(buf, "%d\n", mdev->Bprotocols | get_all_Bprotocols());
-}
-
-static ssize_t _show_protocol(struct device *dev,
-			      struct device_attribute *attr, char *buf)
-{
-	struct mISDNdevice *mdev = dev_to_mISDN(dev);
-
-	if (!mdev)
-		return -ENODEV;
-	return sprintf(buf, "%d\n", mdev->D.protocol);
-}
-
-static ssize_t _show_name(struct device *dev,
-			  struct device_attribute *attr, char *buf)
-{
-	strcpy(buf, dev_name(dev));
-	return strlen(buf);
-}
-
-#if 0 /* hangs */
-static ssize_t _set_name(struct device *dev, struct device_attribute *attr,
-			 const char *buf, size_t count)
-{
-	int err = 0;
-	char *out = kmalloc(count + 1, GFP_KERNEL);
-
-	if (!out)
-		return -ENOMEM;
-
-	memcpy(out, buf, count);
-	if (count && out[count - 1] == '\n')
-		out[--count] = 0;
-	if (count)
-		err = device_rename(dev, out);
-	kfree(out);
-
-	return (err < 0) ? err : count;
-}
-#endif
-
-static ssize_t _show_channelmap(struct device *dev,
-				struct device_attribute *attr, char *buf)
-{
-	struct mISDNdevice *mdev = dev_to_mISDN(dev);
-	char *bp = buf;
-	int i;
-
-	for (i = 0; i <= mdev->nrbchan; i++)
-		*bp++ = test_channelmap(i, mdev->channelmap) ? '1' : '0';
-
-	return bp - buf;
-}
-
-static struct device_attribute mISDN_dev_attrs[] = {
-	__ATTR(id,          S_IRUGO,         _show_id,          NULL),
-	__ATTR(d_protocols, S_IRUGO,         _show_d_protocols, NULL),
-	__ATTR(b_protocols, S_IRUGO,         _show_b_protocols, NULL),
-	__ATTR(protocol,    S_IRUGO,         _show_protocol,    NULL),
-	__ATTR(channelmap,  S_IRUGO,         _show_channelmap,  NULL),
-	__ATTR(nrbchan,     S_IRUGO,         _show_nrbchan,     NULL),
-	__ATTR(name,        S_IRUGO,         _show_name,        NULL),
-/*	__ATTR(name,        S_IRUGO | S_IWUSR, _show_name,      _set_name), */
-	{}
-};
-
-#ifdef CONFIG_HOTPLUG
-static int mISDN_uevent(struct device *dev, struct kobj_uevent_env *env)
-{
-	struct mISDNdevice *mdev = dev_to_mISDN(dev);
-
-	if (!mdev)
-		return 0;
-
-	if (add_uevent_var(env, "nchans=%d", mdev->nrbchan))
-		return -ENOMEM;
-
-	return 0;
-}
-#endif
-
-static void mISDN_class_release(struct class *cls)
-{
-	/* do nothing, it's static */
-}
-
-static struct class mISDN_class = {
-	.name = "mISDN",
-	.owner = THIS_MODULE,
-#ifdef CONFIG_HOTPLUG
-	.dev_uevent = mISDN_uevent,
-#endif
-	.dev_attrs = mISDN_dev_attrs,
-	.dev_release = mISDN_dev_release,
-	.class_release = mISDN_class_release,
-};
-
-static int
-_get_mdevice(struct device *dev, void *id)
-{
-	struct mISDNdevice *mdev = dev_to_mISDN(dev);
-
-	if (!mdev)
-		return 0;
-	if (mdev->id != *(u_int *)id)
-		return 0;
-	return 1;
-}
-
 struct mISDNdevice
 *get_mdevice(u_int id)
 {
-	return dev_to_mISDN(class_find_device(&mISDN_class, &id,
-					      _get_mdevice));
-}
+	struct mISDNdevice *dev;
 
-static int
-_get_mdevice_count(struct device *dev, void *cnt)
-{
-	*(int *)cnt += 1;
-	return 0;
+	read_lock(&device_lock);
+	list_for_each_entry(dev, &devices, D.list)
+		if (dev->id == id) {
+			read_unlock(&device_lock);
+			return dev;
+		}
+	read_unlock(&device_lock);
+	return NULL;
 }
 
 int
 get_mdevice_count(void)
 {
 	int cnt = 0;
+	struct mISDNdevice *dev;
 
-	class_for_each_device(&mISDN_class, &cnt, _get_mdevice_count);
+	read_lock(&device_lock);
+	list_for_each_entry(dev, &devices, D.list)
+		cnt++;
+	read_unlock(&device_lock);
 	return cnt;
 }
 
@@ -210,7 +66,6 @@ static int
 get_free_devid(void)
 {
 	u_int	i;
-
 	for (i = 0; i <= MAX_DEVICE_ID; i++)
 		if (!test_and_set_bit(i, (u_long *)&device_ids))
 			break;
@@ -223,6 +78,7 @@ int
 mISDN_register_device(struct mISDNdevice *dev,
 		      struct device *parent, char *name)
 {
+	u_long	flags;
 	int	err;
 
 	err = get_free_devid();
@@ -230,31 +86,22 @@ mISDN_register_device(struct mISDNdevice
 		goto error1;
 	dev->id = err;
 
-	device_initialize(&dev->dev);
 	if (name && name[0])
-		dev_set_name(&dev->dev, "%s", name);
+		strlcpy(dev->name, name, BUS_ID_SIZE);
 	else
-		dev_set_name(&dev->dev, "mISDN%d", dev->id);
+		snprintf(dev->name, BUS_ID_SIZE, "mISDN%d", dev->id);
+
 	if (debug & DEBUG_CORE)
 		printk(KERN_DEBUG "mISDN_register %s %d\n",
-		       dev_name(&dev->dev), dev->id);
+		       dev_name(dev), dev->id);
 	err = create_stack(dev);
 	if (err)
 		goto error1;
 
-	dev->dev.class = &mISDN_class;
-	dev->dev.platform_data = dev;
-	dev->dev.parent = parent;
-	dev_set_drvdata(&dev->dev, dev);
-
-	err = device_add(&dev->dev);
-	if (err)
-		goto error3;
-	return 0;
-
-error3:
-	delete_stack(dev);
-	return err;
+	write_lock_irqsave(&device_lock, flags);
+	list_add_tail(&dev->D.list, &devices);
+	write_unlock_irqrestore(&device_lock, flags);
+	err = 0;
 error1:
 	return err;
 
@@ -263,16 +110,17 @@ EXPORT_SYMBOL(mISDN_register_device);
 
 void
 mISDN_unregister_device(struct mISDNdevice *dev) {
+	u_long flags;
+
 	if (debug & DEBUG_CORE)
 		printk(KERN_DEBUG "mISDN_unregister %s %d\n",
-		       dev_name(&dev->dev), dev->id);
+		       dev_name(dev), dev->id);
 	/* sysfs_remove_link(&dev->dev.kobj, "device"); */
-	device_del(&dev->dev);
-	dev_set_drvdata(&dev->dev, NULL);
-
 	test_and_clear_bit(dev->id, (u_long *)&device_ids);
+	write_lock_irqsave(&device_lock, flags);
+	list_del(&dev->D.list);
+	write_unlock_irqrestore(&device_lock, flags);
 	delete_stack(dev);
-	put_device(&dev->dev);
 }
 EXPORT_SYMBOL(mISDN_unregister_device);
 
@@ -367,7 +215,7 @@ const char *mISDNDevName4ch(struct mISDN
 		return msg_no_stack;
 	if (!ch->st->dev)
 		return msg_no_stackdev;
-	return dev_name(&ch->st->dev->dev);
+	return dev_name(ch->st->dev);
 };
 EXPORT_SYMBOL(mISDNDevName4ch);
 
@@ -380,31 +228,26 @@ mISDNInit(void)
 	       MISDN_MAJOR_VERSION, MISDN_MINOR_VERSION, MISDN_RELEASE);
 	mISDN_init_clock(&debug);
 	mISDN_initstack(&debug);
-	err = class_register(&mISDN_class);
-	if (err)
-		goto error1;
 	err = mISDN_inittimer(&debug);
 	if (err)
-		goto error2;
+		goto error1;
 	err = l1_init(&debug);
 	if (err)
-		goto error3;
+		goto error2;
 	err = Isdnl2_Init(&debug);
 	if (err)
-		goto error4;
+		goto error3;
 	err = misdn_sock_init(&debug);
 	if (err)
-		goto error5;
+		goto error4;
 	return 0;
 
-error5:
-	Isdnl2_cleanup();
 error4:
-	l1_cleanup();
+	Isdnl2_cleanup();
 error3:
-	mISDN_timer_cleanup();
+	l1_cleanup();
 error2:
-	class_unregister(&mISDN_class);
+	mISDN_timer_cleanup();
 error1:
 	return err;
 }
@@ -415,7 +258,6 @@ static void mISDN_cleanup(void)
 	Isdnl2_cleanup();
 	l1_cleanup();
 	mISDN_timer_cleanup();
-	class_unregister(&mISDN_class);
 
 	printk(KERN_DEBUG "mISDNcore unloaded\n");
 }
Index: standalone/drivers/isdn/mISDN/l1oip_core.c
===================================================================
--- standalone.orig/drivers/isdn/mISDN/l1oip_core.c
+++ standalone/drivers/isdn/mISDN/l1oip_core.c
@@ -1437,7 +1437,6 @@ init_card(struct l1oip *hc, int pri, int
 		hc->chan[i + ch].bch = bch;
 		set_channelmap(bch->nr, dch->dev.channelmap);
 	}
-	/* TODO: create a parent device for this driver */
 	ret = mISDN_register_device(&dch->dev, NULL, hc->name);
 	if (ret)
 		return ret;
Index: standalone/drivers/isdn/mISDN/layer1.c
===================================================================
--- standalone.orig/drivers/isdn/mISDN/layer1.c
+++ standalone/drivers/isdn/mISDN/layer1.c
@@ -104,7 +104,7 @@ l1m_debug(struct FsmInst *fi, char *fmt,
 	va_list va;
 
 	va_start(va, fmt);
-	printk(KERN_DEBUG "%s: ", dev_name(&l1->dch->dev.dev));
+	printk(KERN_DEBUG "%s: ", dev_name(&l1->dch->dev));
 	vprintk(fmt, va);
 	printk("\n");
 	va_end(va);
Index: standalone/drivers/isdn/mISDN/socket.c
===================================================================
--- standalone.orig/drivers/isdn/mISDN/socket.c
+++ standalone/drivers/isdn/mISDN/socket.c
@@ -403,7 +403,7 @@ data_sock_ioctl(struct socket *sock, uns
 			memcpy(di.channelmap, dev->channelmap,
 			       sizeof(di.channelmap));
 			di.nrbchan = dev->nrbchan;
-			strcpy(di.name, dev_name(&dev->dev));
+			strcpy(di.name, dev_name(dev));
 			if (copy_to_user((void __user *)arg, &di, sizeof(di)))
 				err = -EFAULT;
 		} else
@@ -687,7 +687,7 @@ base_sock_ioctl(struct socket *sock, uns
 			memcpy(di.channelmap, dev->channelmap,
 			       sizeof(di.channelmap));
 			di.nrbchan = dev->nrbchan;
-			strcpy(di.name, dev_name(&dev->dev));
+			strcpy(di.name, dev_name(dev));
 			if (copy_to_user((void __user *)arg, &di, sizeof(di)))
 				err = -EFAULT;
 		} else
@@ -703,7 +703,7 @@ base_sock_ioctl(struct socket *sock, uns
 		}
 		dev = get_mdevice(dn.id);
 		if (dev)
-			err = device_rename(&dev->dev, dn.name);
+			strlcpy(dev->name, dn.name, BUS_ID_SIZE);
 		else
 			err = -ENODEV;
 	}
Index: standalone/drivers/isdn/mISDN/stack.c
===================================================================
--- standalone.orig/drivers/isdn/mISDN/stack.c
+++ standalone/drivers/isdn/mISDN/stack.c
@@ -173,7 +173,7 @@ send_msg_to_layer(struct mISDNstack *st,
 		else
 			printk(KERN_WARNING
 			       "%s: dev(%s) prim(%x) id(%x) no channel\n",
-			       __func__, dev_name(&st->dev->dev), hh->prim,
+			       __func__, dev_name(st->dev), hh->prim,
 			       hh->id);
 	} else if (lm == 0x8) {
 		WARN_ON(lm == 0x8);
@@ -183,12 +183,12 @@ send_msg_to_layer(struct mISDNstack *st,
 		else
 			printk(KERN_WARNING
 			       "%s: dev(%s) prim(%x) id(%x) no channel\n",
-			       __func__, dev_name(&st->dev->dev), hh->prim,
+			       __func__, dev_name(st->dev), hh->prim,
 			       hh->id);
 	} else {
 		/* broadcast not handled yet */
 		printk(KERN_WARNING "%s: dev(%s) prim %x not delivered\n",
-		       __func__, dev_name(&st->dev->dev), hh->prim);
+		       __func__, dev_name(st->dev), hh->prim);
 	}
 	return -ESRCH;
 }
@@ -207,7 +207,7 @@ mISDNStackd(void *data)
 	sigfillset(&current->blocked);
 	if (*debug & DEBUG_MSG_THREAD)
 		printk(KERN_DEBUG "mISDNStackd %s started\n",
-		       dev_name(&st->dev->dev));
+		       dev_name(st->dev));
 
 	if (st->notify != NULL) {
 		complete(st->notify);
@@ -243,7 +243,7 @@ mISDNStackd(void *data)
 					printk(KERN_DEBUG
 					       "%s: %s prim(%x) id(%x) "
 					       "send call(%d)\n",
-					       __func__, dev_name(&st->dev->dev),
+					       __func__, dev_name(st->dev),
 					       mISDN_HEAD_PRIM(skb),
 					       mISDN_HEAD_ID(skb), err);
 				dev_kfree_skb(skb);
@@ -286,7 +286,7 @@ mISDNStackd(void *data)
 						     mISDN_STACK_ACTION_MASK));
 		if (*debug & DEBUG_MSG_THREAD)
 			printk(KERN_DEBUG "%s: %s wake status %08lx\n",
-			       __func__, dev_name(&st->dev->dev), st->status);
+			       __func__, dev_name(st->dev), st->status);
 		test_and_set_bit(mISDN_STACK_ACTIVE, &st->status);
 
 		test_and_clear_bit(mISDN_STACK_WAKEUP, &st->status);
@@ -301,16 +301,16 @@ mISDNStackd(void *data)
 #ifdef MISDN_MSG_STATS
 	printk(KERN_DEBUG "mISDNStackd daemon for %s proceed %d "
 	       "msg %d sleep %d stopped\n",
-	       dev_name(&st->dev->dev), st->msg_cnt, st->sleep_cnt,
+	       dev_name(st->dev), st->msg_cnt, st->sleep_cnt,
 	       st->stopped_cnt);
 	printk(KERN_DEBUG
 	       "mISDNStackd daemon for %s utime(%ld) stime(%ld)\n",
-	       dev_name(&st->dev->dev), st->thread->utime, st->thread->stime);
+	       dev_name(st->dev), st->thread->utime, st->thread->stime);
 	printk(KERN_DEBUG
 	       "mISDNStackd daemon for %s nvcsw(%ld) nivcsw(%ld)\n",
-	       dev_name(&st->dev->dev), st->thread->nvcsw, st->thread->nivcsw);
+	       dev_name(st->dev), st->thread->nvcsw, st->thread->nivcsw);
 	printk(KERN_DEBUG "mISDNStackd daemon for %s killed now\n",
-	       dev_name(&st->dev->dev));
+	       dev_name(st->dev));
 #endif
 	test_and_set_bit(mISDN_STACK_KILLED, &st->status);
 	test_and_clear_bit(mISDN_STACK_RUNNING, &st->status);
@@ -401,15 +401,15 @@ create_stack(struct mISDNdevice *dev)
 	newst->own.recv = mISDN_queue_message;
 	if (*debug & DEBUG_CORE_FUNC)
 		printk(KERN_DEBUG "%s: st(%s)\n", __func__,
-		       dev_name(&newst->dev->dev));
+		       dev_name(newst->dev));
 	newst->notify = &done;
 	newst->thread = kthread_run(mISDNStackd, (void *)newst, "mISDN_%s",
-				    dev_name(&newst->dev->dev));
+				    dev_name(newst->dev));
 	if (IS_ERR(newst->thread)) {
 		err = PTR_ERR(newst->thread);
 		printk(KERN_ERR
 		       "mISDN:cannot create kernel thread for %s (%d)\n",
-		       dev_name(&newst->dev->dev), err);
+		       dev_name(newst->dev), err);
 		delete_teimanager(dev->teimgr);
 		kfree(newst);
 	} else
@@ -428,7 +428,7 @@ connect_layer1(struct mISDNdevice *dev,
 
 	if (*debug &  DEBUG_CORE_FUNC)
 		printk(KERN_DEBUG "%s: %s proto(%x) adr(%d %d %d %d)\n",
-		       __func__, dev_name(&dev->dev), protocol, adr->dev,
+		       __func__, dev_name(dev), protocol, adr->dev,
 		       adr->channel, adr->sapi, adr->tei);
 	switch (protocol) {
 	case ISDN_P_NT_S0:
@@ -465,7 +465,7 @@ connect_Bstack(struct mISDNdevice *dev,
 
 	if (*debug &  DEBUG_CORE_FUNC)
 		printk(KERN_DEBUG "%s: %s proto(%x) adr(%d %d %d %d)\n",
-		       __func__, dev_name(&dev->dev), protocol,
+		       __func__, dev_name(dev), protocol,
 		       adr->dev, adr->channel, adr->sapi,
 		       adr->tei);
 	ch->st = dev->D.st;
@@ -521,7 +521,7 @@ create_l2entity(struct mISDNdevice *dev,
 
 	if (*debug &  DEBUG_CORE_FUNC)
 		printk(KERN_DEBUG "%s: %s proto(%x) adr(%d %d %d %d)\n",
-		       __func__, dev_name(&dev->dev), protocol,
+		       __func__, dev_name(dev), protocol,
 		       adr->dev, adr->channel, adr->sapi,
 		       adr->tei);
 	rq.protocol = ISDN_P_TE_S0;
@@ -573,7 +573,7 @@ delete_channel(struct mISDNchannel *ch)
 	}
 	if (*debug & DEBUG_CORE_FUNC)
 		printk(KERN_DEBUG "%s: st(%s) protocol(%x)\n", __func__,
-		       dev_name(&ch->st->dev->dev), ch->protocol);
+		       dev_name(ch->st->dev), ch->protocol);
 	if (ch->protocol >= ISDN_P_B_START) {
 		if (ch->peer) {
 			ch->peer->ctrl(ch->peer, CLOSE_CHANNEL, NULL);
@@ -626,7 +626,7 @@ delete_stack(struct mISDNdevice *dev)
 
 	if (*debug & DEBUG_CORE_FUNC)
 		printk(KERN_DEBUG "%s: st(%s)\n", __func__,
-		       dev_name(&st->dev->dev));
+		       dev_name(st->dev));
 	if (dev->teimgr)
 		delete_teimanager(dev->teimgr);
 	if (st->thread) {
Index: standalone/drivers/isdn/mISDN/tei.c
===================================================================
--- standalone.orig/drivers/isdn/mISDN/tei.c
+++ standalone/drivers/isdn/mISDN/tei.c
@@ -988,7 +988,7 @@ create_teimgr(struct manager *mgr, struc
 
 	if (*debug & DEBUG_L2_TEI)
 		printk(KERN_DEBUG "%s: %s proto(%x) adr(%d %d %d %d)\n",
-		       __func__, dev_name(&mgr->ch.st->dev->dev),
+		       __func__, dev_name(mgr->ch.st->dev),
 		       crq->protocol, crq->adr.dev, crq->adr.channel,
 		       crq->adr.sapi, crq->adr.tei);
 	if (crq->adr.tei > GROUP_TEI)
Index: standalone/include/linux/mISDNif_s.h
===================================================================
--- standalone.orig/include/linux/mISDNif_s.h
+++ standalone/include/linux/mISDNif_s.h
@@ -506,7 +506,7 @@ struct mISDNdevice {
 	u_char			channelmap[MISDN_CHMAP_SIZE];
 	struct list_head	bchannels;
 	struct mISDNchannel	*teimgr;
-	struct device		dev;
+	char			name[BUS_ID_SIZE];
 };
 
 struct mISDNstack {
@@ -593,12 +593,9 @@ extern struct mISDNclock *mISDN_register
 						void *);
 extern void	mISDN_unregister_clock(struct mISDNclock *);
 
-static inline struct mISDNdevice *dev_to_mISDN(struct device *dev)
+static inline char *dev_name(struct mISDNdevice *dev)
 {
-	if (dev)
-		return dev_get_drvdata(dev);
-	else
-		return NULL;
+	return &dev->name[0];
 }
 
 extern void	set_channel_address(struct mISDNchannel *, u_int, u_int);
Index: standalone/drivers/isdn/hardware/mISDN/netjet.c
===================================================================
--- standalone.orig/drivers/isdn/hardware/mISDN/netjet.c
+++ standalone/drivers/isdn/hardware/mISDN/netjet.c
@@ -969,7 +969,7 @@ nj_release(struct tiger_hw *card)
 	}
 	if (card->irq > 0)
 		free_irq(card->irq, card);
-	if (card->isac.dch.dev.dev.class)
+	// if (card->isac.dch.dev.dev.class)
 		mISDN_unregister_device(&card->isac.dch.dev);
 
 	for (i = 0; i < 2; i++) {
